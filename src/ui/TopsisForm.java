/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import fuzzy2.TOPSIS;
import fuzzy2.Type2TOPSIS;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bamo
 */
public class TopsisForm extends javax.swing.JFrame {

    /**
     * Creates new form TopsisForm
     */
    public TopsisForm() {
        initComponents();
        loadType1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        fuzzyType = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        normalised = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        weightedTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        positiveIdealSolution = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        negativeIdeal = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        negAltDistance = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        posAltDistance = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        closenessCoefficient = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TOPSIS");

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true));

        jLabel6.setText("Fuzzy Logic Type");

        fuzzyType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Type 1", "Type 2" }));
        fuzzyType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fuzzyTypeItemStateChanged(evt);
            }
        });
        fuzzyType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuzzyTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel6)
                .addGap(31, 31, 31)
                .addComponent(fuzzyType, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(169, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(fuzzyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(102, 102, 102))
        );

        normalised.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(normalised);

        weightedTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(weightedTable1);

        jScrollPane3.setViewportView(positiveIdealSolution);

        jScrollPane4.setViewportView(negativeIdeal);

        jScrollPane5.setViewportView(negAltDistance);

        jScrollPane6.setViewportView(posAltDistance);

        jScrollPane7.setViewportView(closenessCoefficient);

        jLabel1.setText("Normalised Decision Matrix");

        jLabel2.setText("Weighted Normalised Decision Matrix");

        jLabel3.setText("positive Ideal Solution");

        jLabel4.setText("Negative Ideal Solution");

        jLabel5.setText("Distance Alternative to Positive Ideal Solution");

        jLabel7.setText("Distance alternative to negative ideal solution");

        jLabel8.setText("Closeness coefficient");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)))
                .addGap(0, 27, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2)
                                .addGap(4, 4, 4))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fuzzyTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fuzzyTypeItemStateChanged
        // TODO add your handling code here:
        if (fuzzyType.getSelectedIndex() == 0) {
            loadType1();
        } else {
            loadType2();
        }
    }//GEN-LAST:event_fuzzyTypeItemStateChanged

    private void fuzzyTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fuzzyTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fuzzyTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TopsisForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TopsisForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TopsisForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TopsisForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TopsisForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList closenessCoefficient;
    private javax.swing.JComboBox fuzzyType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JList negAltDistance;
    private javax.swing.JList negativeIdeal;
    private javax.swing.JTable normalised;
    private javax.swing.JList posAltDistance;
    private javax.swing.JList positiveIdealSolution;
    private javax.swing.JTable weightedTable1;
    // End of variables declaration//GEN-END:variables

    private void loadType1() {
        this.normalised.removeAll();
        this.weightedTable1.removeAll();
        this.positiveIdealSolution.removeAll();
        this.negativeIdeal.removeAll();
        this.posAltDistance.removeAll();
        this.negAltDistance.removeAll();
        this.closenessCoefficient.removeAll();
        
       TOPSIS topsis = new TOPSIS();
       double [][] decisionMatrix= topsis.calculateNormalizedDecisionMatrix();
       String [] col1 = new String[decisionMatrix.length];
       decisionMatrix = DeffuzificationForm.transpose(decisionMatrix);
       String [][] decisionMatrixString = DeffuzificationForm.convertToString(decisionMatrix);   
       DefaultTableModel decModel = new DefaultTableModel(decisionMatrixString, col1);
       this.normalised.setModel(decModel);
       double [][] weightedMatrix = topsis.calculateWeightedNormalizedDecisionMatrix();
       String [] col2  = new String[weightedMatrix.length];
       weightedMatrix = DeffuzificationForm.transpose(weightedMatrix);
       String [][] weightedMatrixString = DeffuzificationForm.convertToString(weightedMatrix);
       DefaultTableModel wModel = new DefaultTableModel(weightedMatrixString, col2);
       this.weightedTable1.setModel(wModel);
       //now for the list
       double [] positiveIdea = topsis.calculatePositifIdealSolution();
       DefaultListModel pModel = new DefaultListModel();
        for (int i = 0; i < positiveIdea.length; i++) {
            pModel.addElement(positiveIdea[i]);
        }
        this.positiveIdealSolution.setModel(pModel);
       double [] negativeIdea = topsis.calculateNegatifIdealSolution();
       DefaultListModel nModel = new DefaultListModel();
        for (int i = 0; i < negativeIdea.length; i++) {
            nModel.addElement(negativeIdea[i]);
        }
        this.negativeIdeal.setModel(nModel);
       double [] distanceAltPos = topsis.calculateDistanceAlternativeToPositifIdealSolution();
       DefaultListModel altPosModel = new DefaultListModel();
        for (int i = 0; i < distanceAltPos.length; i++) {
            altPosModel.addElement(distanceAltPos[i]);
        }
        this.posAltDistance.setModel(altPosModel);
       double [] distanceAltNeg = topsis.calculateDistanceAlternativeToNegatifIdealSolution();
       DefaultListModel altNegModel = new DefaultListModel();
        for (int i = 0; i < distanceAltNeg.length; i++) {
            altNegModel.addElement(distanceAltNeg[i]);
        }
        this.negAltDistance.setModel(altNegModel);
       double [] coefficient = topsis.calculateClosenessCoefficient();
       DefaultListModel cModel = new DefaultListModel();
        for (int i = 0; i < coefficient.length; i++) {
            cModel.addElement(coefficient[i]);
        }
        this.closenessCoefficient.setModel(cModel);
    }

    private void loadType2() {
        this.normalised.removeAll();
        this.weightedTable1.removeAll();
        this.positiveIdealSolution.removeAll();
        this.negativeIdeal.removeAll();
        this.posAltDistance.removeAll();
        this.negAltDistance.removeAll();
        this.closenessCoefficient.removeAll();
        
       Type2TOPSIS topsis = new Type2TOPSIS();
       double [][] decisionMatrix= topsis.calculateNormalizedDecisionMatrix();
       String [] col1 = new String[decisionMatrix.length];
       decisionMatrix = DeffuzificationForm.transpose(decisionMatrix);
       String [][] decisionMatrixString = DeffuzificationForm.convertToString(decisionMatrix);
       DefaultTableModel decModel = new DefaultTableModel(decisionMatrixString, col1);
       this.normalised.setModel(decModel);
       double [][] weightedMatrix = topsis.calculateWeightedNormalizedDecisionMatrix();
       String [] col2 = new String[weightedMatrix.length];
       weightedMatrix = DeffuzificationForm.transpose(weightedMatrix);
       String [][] weightedMatrixString = DeffuzificationForm.convertToString(weightedMatrix);
       DefaultTableModel wModel = new DefaultTableModel(weightedMatrixString, col2);
       this.weightedTable1.setModel(wModel);
       //now for the list
       double [] positiveIdea = topsis.calculatePositifIdealSolution();
       DefaultListModel pModel = new DefaultListModel();
        for (int i = 0; i < positiveIdea.length; i++) {
            pModel.addElement(positiveIdea[i]);
        }
        this.positiveIdealSolution.setModel(pModel);
       double [] negativeIdea = topsis.calculateNegatifIdealSolution();
       DefaultListModel nModel = new DefaultListModel();
        for (int i = 0; i < negativeIdea.length; i++) {
            nModel.addElement(negativeIdea[i]);
        }
        this.negativeIdeal.setModel(nModel);
       double [] distanceAltPos = topsis.calculateDistanceAlternativeToPositifIdealSolution();
       DefaultListModel altPosModel = new DefaultListModel();
        for (int i = 0; i < distanceAltPos.length; i++) {
            altPosModel.addElement(distanceAltPos[i]);
        }
        this.posAltDistance.setModel(altPosModel);
       double [] distanceAltNeg = topsis.calculateDistanceAlternativeToNegatifIdealSolution();
       DefaultListModel altNegModel = new DefaultListModel();
        for (int i = 0; i < distanceAltNeg.length; i++) {
            altNegModel.addElement(distanceAltNeg[i]);
        }
        this.negAltDistance.setModel(altNegModel);
       double [] coefficient = topsis.calculateClosenessCoefficient();
       DefaultListModel cModel = new DefaultListModel();
        for (int i = 0; i < coefficient.length; i++) {
            cModel.addElement(coefficient[i]);
        }
        this.closenessCoefficient.setModel(cModel);

    }
}
